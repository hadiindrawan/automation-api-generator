import winston, { createLogger, format, transports } from "winston";
import { CustomFileTransport } from "./custom_file_transport";
const { combine, timestamp, printf } = format;
const colorizer = format.colorize();

export class Logger {
    constructor() {
        // Write your constructor here, if you need
    }
    
    console = ({
        service = 'example',
        level = 'debug'
    }) => 
        createLogger({
            level,
            defaultMeta: { service },
            format: combine(
                timestamp({
                    format: 'YYYY-MM-DD HH:mm:ss',
                }),
                printf((output) => colorizer.colorize(output.level, `[${output.timestamp}] ${output.level.toUpperCase()}: ${output.message}`)),
            ),
            transports: [
                // Output logs to console in simple message format
                new transports.Console(),
            ],
        });
    file = ({
        service = 'example',
        type = 'response',
        level = 'debug'
    }) => 
        createLogger({
            level,
            defaultMeta: { service },
            format: combine(
                timestamp({
                    format: 'YYYY-MM-DD HH:mm:ss',
                }),
                printf((output) => colorizer.colorize(output.level, `[${output.timestamp}] ${output.level.toUpperCase()}: ${output.message}`)),
            ),
            transports: [
                // Output logs to console in simple message format
                new CustomFileTransport({
                    format: winston.format.json(),
                    filename: `./logs/${type}.json`,
                }),
            ],
        });
}
