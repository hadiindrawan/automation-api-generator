const chai = require('chai')
chai.use(require('chai-http'))
const requestHelper = require('{{path_helper}}')
const { Config } = require('{{path_config}}'){{path_data}}
const { schema } = require('{{path_schema}}')
const { Logger } = require('{{path_logger}}')
const logger = new Logger();

class Request {
    constructor() {
		// Write your constructor here, if you nee
		// Set up the api with the endpoint based on the environment and change this according to endpoint service
    	this.host = new Config().env().host;
		this.url = "{{url}}" // Set up the API path to the route endpoint
    }

	get request() {
		return chai.request(this.host)
	}

    // This method handles making the HTTP request based on given arguments.
    async api(...args) {
		const payload = new requestHelper().getPayload(args)
    	const attachment = new requestHelper().getAttachment(args)

		try {
			// Send HTTP POST request to the specified path and send the required body with params extracted from args.
			let response = await this.request.{{method}}(this.url){{query}}
			.set("Content-Type", "multipart/form-data"){{header}}

			Object.keys(await this.getMappedBody(payload)).forEach( async (key) => {
				response = await response.field(key, JSON.stringify(await this.getMappedBody(payload)[key]))
			})

			Object.keys(await this.getMappedAttachment(attachment)).forEach(async (key) => {
				if( typeof await this.getMappedAttachment(attachment)[key] != 'object') {
					const raw = await new requestHelper().getFile(await this.getMappedAttachment(attachment)[key])
					response = await response.attach(key, raw.file, raw.name)
				} else {
					await this.getMappedAttachment(attachment)[key].forEach(async (val) => {
						const raw = await new requestHelper().getFile(val)
						response = await response.attach(key, raw.file, raw.name)
					})
				}
			})

      		await this.createLogging(response);
			return response
		} catch (err) {
			await this.createLogging(0, err);
		}
    }
	{{body_section}}

	// This method used for provide attachment file and return object
	async getMappedAttachment(...args) {
		const defaultData = new requestHelper().getDefaultData(data.{{data_attach_name}})
		const dataMapped = await new requestHelper().mapObject(defaultData.driven.attachment, args);

		return dataMapped
	}

	async createLogging(response, error) {
		const isError = error !== undefined;
		const logLevel = isError ? 'error' : 'debug';
		const statusMessage = isError ? 'Failed' : 'Successful';
		const endpoint = `${this.host}${this.url}`;
		const requestPayload = isError ? error.response.request : response.request;
		const responsePayload = isError ? error.response.body : response.body;
	
		logger.console({ level: logLevel }).http(`${statusMessage} to hit login endpoint ${endpoint}`);
		
		logger.file({ type: 'request', level: logLevel }).http({
			endpoint: endpoint,
			data: requestPayload
		});
	
		logger.file({ type: 'response', level: logLevel }).http({
			endpoint: endpoint,
			data: responsePayload
		});
	}
	
	// This method used for provide expectation and return json schema
    expect(cases="success") {
		return new requestHelper().getSchema(schema, cases)
    }
}

module.exports = Request