[Lack]
- Belum ada handle ketika objectkeys kosong, contoh url kosong
- Handling child folder tidak infinite, terbatas dengan jumlah if 


---- New research ----

[Goals]
- Buat generator model OOP, yaitu body, expect, header, dipisahkan difolder baru
- body, header ngambil dari export postman
- expect add manually dengan merubah dengan ke jsonSchema



[Possible steps]
- Generate file test:
    - describe scenario 
    - it() testcase or request
    - header, body, dan expect dibuat terpisah (diimport)

- Generate body/payload 
    - Dibuat function/method dimana keys body (json) digenerate dari postman, untuk values-nya
      dinamis atau bisa dibuat sesuai dengan kondisi tertentu dengan menggunakan parameter
    - Function/method ini nantinya bisa digunakan untuk berbagai case (positif/negatif)

- Expect file
    - Ini akan dimasukan/attach manually berupa JSON
    - JSON-nya akan diconvert ke jsonSchema menggunakan library json-schema sehingga assertion/validasi pada test file bisa menggunakan .jsonSchema()

[Efficiency]
- SDET hanya perlu adjust di bagian body sesuai dengan case yang dibutuhkan
- SDET memasukan file JSON expect result untuk setiap request

const chai = require("chai");
const expect = require("chai").expect;
const chaiHttp = require("chai-http");
const chaiJsonSchema = require("chai-json-schema");
chai.use(chaiJsonSchema)
chai.use(chaiHttp);
require('dotenv').config()
const api = chai.request(process.env.APP_URL);

const bodyRequest = require('../../body/Project/test');
let body = new bodyRequest()

let data = [
    { 'name' : '', 'job' : 'stau', 'cases': 'Success', 'responseStatus': 201},
]

module.exports = function (){
    describe("Test Create New Project", function () {
        
        data.forEach(({name, job, cases, responseStatus}) => {
            it(cases, function (done) {
                api.post("users")
                .send(new bodyRequest(name,job).request())
                .end(function (err, res) {
                    expect(res.status).to.equals(responseStatus);
                    done();
                });
            });
        })
    })
}

class body {
  constructor(param_name = 'Aku', param_testinimah) {
    this.value_name = param_name
    this.value_testinimah = param_testinimah
  }
 
  request() {
    // Define desired object
    var obj = {
        "name": this.value_name,
        "job": this.value_testinimah
    }
    // Return it
    return obj
  }
}

module.exports = body