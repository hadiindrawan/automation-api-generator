const chai = require('chai')
chai.use(require('chai-http'))
const request_helper = require('{{path_helper}}')
const config = require('{{path_config}}'){{path_data}}
const { schema } = require('{{path_schema}}')

class Request {
    constructor() {
		// Write your constructor here, if you nee
		// Set up the api with the endpoint based on the environment and change this according to endpoint service
		this.url = "{{url}}" // Set up the API path to the route endpoint
    }

	get request() {
		return chai.request(new config().env().host)
	}

    // This method handles making the HTTP request based on given arguments.
    async api(...args) {
		const payload = new request_helper().getPayload(args)
    	const attachment = new request_helper().getAttachment(args)

		// Send HTTP POST request to the specified path and send the required body with params extracted from args.
		let response = await this.request.{{method}}(this.url){{query}}
		.set("Content-Type", "multipart/form-data"){{header}}

		Object.keys(await this.getMappedBody(payload)).forEach( async (key) => {
			response = await response.field(key, JSON.stringify(await this.getMappedBody(payload)[key]))
		})

		Object.keys(await this.getMappedAttachment(attachment)).forEach(async (key) => {
			if( typeof await this.getMappedAttachment(attachment)[key] != 'object') {
				const raw = await new request_helper().getFile(await this.getMappedAttachment(attachment)[key])
				response = await response.attach(key, raw.file, raw.name)
			} else {
				await this.getMappedAttachment(attachment)[key].forEach(async (val) => {
					const raw = await new request_helper().getFile(val)
					response = await response.attach(key, raw.file, raw.name)
				})
			}
		})

		return response
    }
	{{body_section}}

	// This method used for provide attachment file and return object
	async getMappedAttachment(...args) {
		const defaultData = new request_helper().getDefaultData(data.{{data_attach_name}})
		const dataMapped = await new request_helper().mapObject(defaultData.driven.attachment, args);

		return dataMapped
	}
	
	// This method used for provide expectation and return json schema
    expect(cases="success") {
		return new request_helper().getSchema(schema, cases)
    }
}

module.exports = Request